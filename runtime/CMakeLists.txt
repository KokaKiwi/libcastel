cmake_minimum_required(VERSION 2.8)

file(GLOB_RECURSE RUNTIME_STATIC_HEADERS_ORIGIN "${CMAKE_CURRENT_SOURCE_DIR}/includes/*.hh" "${CMAKE_CURRENT_SOURCE_DIR}/includes/*.def")
string(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_BINARY_DIR}" RUNTIME_STATIC_HEADERS "${RUNTIME_STATIC_HEADERS_ORIGIN}")
file(GLOB_RECURSE RUNTIME_STATIC_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/sources/*.cc")
set(RUNTIME_HEADERS ${RUNTIME_STATIC_HEADERS})
set(RUNTIME_SOURCES ${RUNTIME_STATIC_SOURCES})

foreach(HEADER ${RUNTIME_STATIC_HEADERS})
    file(RELATIVE_PATH RELATIVE_HEADER "${CMAKE_BINARY_DIR}" "${HEADER}")
    set(SOURCE_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/${RELATIVE_HEADER}")
    set(BINARY_HEADER "${CMAKE_BINARY_DIR}/${RELATIVE_HEADER}")
    get_filename_component(BINARY_PATH "${BINARY_HEADER}" PATH)
    add_custom_command(OUTPUT
        "${CMAKE_BINARY_DIR}/${RELATIVE_HEADER}"
        COMMAND mkdir -p "${BINARY_PATH}"
        COMMAND cp "${CMAKE_CURRENT_SOURCE_DIR}/${RELATIVE_HEADER}" "${CMAKE_BINARY_DIR}/${RELATIVE_HEADER}"
        DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${RELATIVE_HEADER}"
    )
endforeach(HEADER)

set(CMAKE_CXX_COMPILER clang++)
set(CMAKE_CXX_FLAGS -std=c++11)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

include_directories("${CMAKE_BINARY_DIR}/includes")

add_library(CastelRuntime STATIC ${RUNTIME_HEADERS} ${RUNTIME_SOURCES})
