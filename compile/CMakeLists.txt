cmake_minimum_required(VERSION 2.8)

find_package(LLVM)

file(GLOB_RECURSE GEN_STATIC_HEADERS_ORIGIN "${CMAKE_CURRENT_SOURCE_DIR}/includes/*.hh" "${CMAKE_CURRENT_SOURCE_DIR}/includes/*.def")
string(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_BINARY_DIR}" GEN_STATIC_HEADERS "${GEN_STATIC_HEADERS_ORIGIN}")
file(GLOB_RECURSE GEN_STATIC_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/sources/*.cc")
set(GEN_HEADERS ${GEN_STATIC_HEADERS})
set(GEN_SOURCES ${GEN_STATIC_SOURCES})

foreach(HEADER ${GEN_STATIC_HEADERS})
    file(RELATIVE_PATH RELATIVE_HEADER "${CMAKE_BINARY_DIR}" "${HEADER}")
    set(SOURCE_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/${RELATIVE_HEADER}")
    set(BINARY_HEADER "${CMAKE_BINARY_DIR}/${RELATIVE_HEADER}")
    get_filename_component(BINARY_PATH "${BINARY_HEADER}" PATH)
    add_custom_command(OUTPUT
        "${CMAKE_BINARY_DIR}/${RELATIVE_HEADER}"
        COMMAND mkdir -p "${BINARY_PATH}"
        COMMAND cp "${CMAKE_CURRENT_SOURCE_DIR}/${RELATIVE_HEADER}" "${CMAKE_BINARY_DIR}/${RELATIVE_HEADER}"
        DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${RELATIVE_HEADER}")
endforeach(HEADER)

add_library(CastelCompile STATIC ${GEN_HEADERS} ${GEN_SOURCES})
set_property(TARGET CastelCompile APPEND_STRING PROPERTY COMPILE_FLAGS "${LLVM_CXX_FLAGS}")
add_dependencies(CastelCompile CastelParse)
